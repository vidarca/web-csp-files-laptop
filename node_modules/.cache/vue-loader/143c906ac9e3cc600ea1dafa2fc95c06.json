{"remainingRequest":"C:\\WebProjects\\Web-csp\\web-csp\\web-csp-files-laptop\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\WebProjects\\Web-csp\\web-csp\\web-csp-files-laptop\\src\\components\\AdminPages\\AdminBanners.vue?vue&type=template&id=4406a89c&scoped=true&","dependencies":[{"path":"C:\\WebProjects\\Web-csp\\web-csp\\web-csp-files-laptop\\src\\components\\AdminPages\\AdminBanners.vue","mtime":1601941997804},{"path":"C:\\WebProjects\\Web-csp\\web-csp\\web-csp-files-laptop\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1600692212778},{"path":"C:\\WebProjects\\Web-csp\\web-csp\\web-csp-files-laptop\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1600692265158},{"path":"C:\\WebProjects\\Web-csp\\web-csp\\web-csp-files-laptop\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1600692212778},{"path":"C:\\WebProjects\\Web-csp\\web-csp\\web-csp-files-laptop\\node_modules\\vue-loader\\lib\\index.js","mtime":1600692265154}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}